---
export interface Props {
  courseType?: 'adults' | 'children' | 'corporate';
  location?: string;
}

const { courseType = 'adults', location = '' } = Astro.props;
---

<div id="registrationModal" class="registration-modal" data-course-type={courseType} data-location={location}>
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <button class="modal-close" aria-label="Close registration form">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>

    <!-- Progress Bar -->
    <div class="modal-progress">
      <div class="progress-bar">
        <div class="progress-fill" data-step="1"></div>
      </div>
      <div class="progress-steps">
        <div class="progress-step active" data-step="1">
          <span class="step-number">1</span>
          <span class="step-label">Your Details</span>
        </div>
        <div class="progress-step" data-step="2">
          <span class="step-number">2</span>
          <span class="step-label">Schedule</span>
        </div>
        <div class="progress-step" data-step="3">
          <span class="step-number">3</span>
          <span class="step-label">Confirm</span>
        </div>
      </div>
    </div>

    <!-- Modal Content -->
    <div class="modal-content">
      <!-- Side Panel (Desktop Only) -->
      <div class="modal-sidebar">
        <div class="sidebar-content">
          <div class="sidebar-badge">BRITISH COUNCIL</div>
          <h3>Start Your English Journey</h3>
          <p>Join thousands of learners worldwide</p>

          <div class="trust-indicators">
            <div class="trust-item">
              <div class="trust-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                  <path d="M8 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <div>
                <strong>Expert Teachers</strong>
                <span>Qualified native speakers</span>
              </div>
            </div>
            <div class="trust-item">
              <div class="trust-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <rect x="3" y="4" width="18" height="18" rx="2" stroke="currentColor" stroke-width="2"/>
                  <path d="M3 10h18M9 16h0" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
              </div>
              <div>
                <strong>Flexible Schedule</strong>
                <span>Morning, evening & weekend</span>
              </div>
            </div>
            <div class="trust-item">
              <div class="trust-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                  <path d="M2 12h20M12 2c-2.5 2.5-4 6-4 10s1.5 7.5 4 10c2.5-2.5 4-6 4-10s-1.5-7.5-4-10z" stroke="currentColor" stroke-width="2"/>
                </svg>
              </div>
              <div>
                <strong>Global Recognition</strong>
                <span>Accepted worldwide</span>
              </div>
            </div>
          </div>

          <div class="social-proof">
            <div class="proof-avatars">
              <div class="avatar"></div>
              <div class="avatar"></div>
              <div class="avatar"></div>
              <div class="avatar-more">+20</div>
            </div>
            <p class="proof-text">
              <strong>23 students</strong> enrolled this week
            </p>
          </div>
        </div>
      </div>

      <!-- Form Steps Container -->
      <div class="modal-form">
        <!-- Step 1: Contact Information -->
        <div class="form-step active" data-step="1">
          <h2>Let's get started</h2>
          <p class="step-description">Tell us a bit about yourself so we can find the perfect course for you.</p>

          <form id="step1Form" novalidate>
            <div class="form-group">
              <label for="fullName">Full Name *</label>
              <input type="text" id="fullName" name="fullName" required
                     placeholder="Enter your full name" />
              <span class="error-message"></span>
            </div>

            <div class="form-group">
              <label for="email">Email Address *</label>
              <input type="email" id="email" name="email" required
                     placeholder="you@example.com" />
              <span class="error-message"></span>
            </div>

            <div class="form-group">
              <label for="phone">Phone Number *</label>
              <div class="phone-input">
                <select id="phoneCode" name="phoneCode">
                  <option value="+34">+34 (Spain)</option>
                  <option value="+44">+44 (UK)</option>
                  <option value="+1">+1 (USA)</option>
                </select>
                <input type="tel" id="phone" name="phone" required
                       placeholder="123 456 789" />
              </div>
              <span class="error-message"></span>
            </div>

            <div class="form-group">
              <label for="courseInterest">Course Type *</label>
              <select id="courseInterest" name="courseInterest" required>
                <option value="">Select a course type</option>
                <option value="adults" selected={courseType === 'adults'}>Adult Courses</option>
                <option value="children" selected={courseType === 'children'}>Children & Teens</option>
                <option value="corporate" selected={courseType === 'corporate'}>Corporate Training</option>
                <option value="online">Online Courses</option>
              </select>
              <span class="error-message"></span>
            </div>

            <!-- Children-specific fields (hidden by default) -->
            <div id="childrenFields" class="children-fields" style="display: none;">
              <div class="form-group">
                <label for="childName">Child's Name *</label>
                <input type="text" id="childName" name="childName"
                       placeholder="Enter child's full name" />
                <span class="error-message"></span>
              </div>

              <div class="form-group">
                <label for="childAge">Child's Age *</label>
                <select id="childAge" name="childAge">
                  <option value="">Select age</option>
                  {[...Array(16)].map((_, i) => (
                    <option value={i + 3}>{i + 3} years</option>
                  ))}
                </select>
                <span class="error-message"></span>
              </div>
            </div>

            <div class="form-group">
              <label for="location">Preferred Location *</label>
              <select id="location" name="location" required>
                <option value="">Select a location</option>
                <option value="madrid" selected={location === 'madrid'}>Madrid</option>
                <option value="barcelona" selected={location === 'barcelona'}>Barcelona</option>
                <option value="valencia" selected={location === 'valencia'}>Valencia</option>
                <option value="bilbao" selected={location === 'bilbao'}>Bilbao</option>
                <option value="palma" selected={location === 'palma'}>Palma</option>
                <option value="online">Online</option>
              </select>
              <span class="error-message"></span>
            </div>

            <div class="form-checkbox">
              <input type="checkbox" id="newsletter" name="newsletter" />
              <label for="newsletter">
                Send me updates about courses and special offers
              </label>
            </div>
          </form>
        </div>

        <!-- Step 2: Calendar Selection -->
        <div class="form-step" data-step="2">
          <h2>Choose your schedule</h2>
          <p class="step-description">Select a consultation time that works best for you.</p>

          <div class="calendar-container">
            <div class="calendar-header">
              <button class="calendar-nav prev" aria-label="Previous month">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"/>
                </svg>
              </button>
              <div class="calendar-month">October 2025</div>
              <button class="calendar-nav next" aria-label="Next month">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"/>
                </svg>
              </button>
            </div>

            <div class="calendar-grid">
              <div class="calendar-weekdays">
                <span>Mon</span>
                <span>Tue</span>
                <span>Wed</span>
                <span>Thu</span>
                <span>Fri</span>
                <span>Sat</span>
                <span>Sun</span>
              </div>
              <div class="calendar-days" id="calendarDays">
                <!-- Calendar days will be populated by JavaScript -->
              </div>
            </div>

            <div class="time-slots" id="timeSlots" style="display: none;">
              <h3>Available times</h3>
              <div class="slots-grid">
                <!-- Time slots will be populated by JavaScript -->
              </div>
            </div>

            <div class="flexible-option">
              <button type="button" class="flexible-btn">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 2a8 8 0 100 16 8 8 0 000-16zm1 8a1 1 0 01-2 0V6a1 1 0 012 0v4zm-1 4a1 1 0 100-2 1 1 0 000 2z"/>
                </svg>
                I'm flexible with timing - contact me with options
              </button>
            </div>
          </div>
        </div>

        <!-- Step 3: Confirmation -->
        <div class="form-step" data-step="3">
          <h2>Confirm your registration</h2>
          <p class="step-description">Review your details and complete your registration.</p>

          <div class="confirmation-summary">
            <div class="summary-section">
              <h3>Your Information</h3>
              <dl class="summary-list">
                <dt>Name:</dt>
                <dd id="summaryName">-</dd>
                <dt>Email:</dt>
                <dd id="summaryEmail">-</dd>
                <dt>Phone:</dt>
                <dd id="summaryPhone">-</dd>
                <dt>Course Type:</dt>
                <dd id="summaryCourse">-</dd>
                <dt>Location:</dt>
                <dd id="summaryLocation">-</dd>
              </dl>
            </div>

            <div class="summary-section">
              <h3>Consultation Time</h3>
              <div class="appointment-card">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                </svg>
                <div>
                  <p id="summaryDate">-</p>
                  <p id="summaryTime">-</p>
                </div>
              </div>
            </div>

            <div class="terms-section">
              <div class="form-checkbox">
                <input type="checkbox" id="terms" name="terms" required />
                <label for="terms">
                  I have read and accept the <a href="/terms" target="_blank">Terms and Conditions</a>
                  and <a href="/privacy" target="_blank">Privacy Policy</a> *
                </label>
              </div>
              <span class="error-message"></span>
            </div>

            <div class="additional-info">
              <label for="specialRequirements">Special requirements or questions (optional)</label>
              <textarea id="specialRequirements" name="specialRequirements" rows="3"
                       placeholder="Let us know if you have any special requirements or questions"></textarea>
            </div>
          </div>
        </div>

        <!-- Success State -->
        <div class="form-success" style="display: none;">
          <div class="success-icon">
            <svg width="64" height="64" viewBox="0 0 64 64" fill="currentColor">
              <path d="M32 0C14.3 0 0 14.3 0 32s14.3 32 32 32 32-14.3 32-32S49.7 0 32 0zm-4 48L12 32l4.2-4.2L28 39.6l19.8-19.8L52 24 28 48z"/>
            </svg>
          </div>
          <h2>Registration Complete!</h2>
          <p>Thank you for registering. We've sent a confirmation email to your address.</p>
          <p class="success-detail">One of our advisors will contact you within 24 hours to finalize your enrollment.</p>

          <div class="success-actions">
            <button class="btn-primary" onclick="window.location.href='/portal'">Go to Student Portal</button>
            <button class="btn-secondary" onclick="closeRegistrationModal()">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="modal-footer">
      <button type="button" class="btn-back" style="display: none;">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M11 1L4 8l7 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" fill="none"/>
        </svg>
        Back
      </button>
      <div class="footer-spacer"></div>
      <button type="button" class="btn-next">
        Continue
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M5 1l7 7-7 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" fill="none"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<style is:global>
  .registration-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9999;
    animation: fadeIn 0.3s ease;
  }

  .registration-modal.active {
    display: block;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 1;
  }

  .modal-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border-radius: 1.5rem;
    width: 90%;
    max-width: 1000px;
    max-height: 85vh;
    height: auto;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    animation: slideUp 0.3s ease;
    z-index: 2; /* Ensure container is above overlay */
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translate(-50%, -45%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  .modal-close {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    border: none;
    background: rgba(0, 0, 0, 0.05);
    color: var(--bc-primary-blue);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 10;
  }

  .modal-close:hover {
    background: rgba(0, 0, 0, 0.1);
    transform: rotate(90deg);
  }

  .modal-progress {
    padding: 1.5rem 1.5rem 0.75rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }

  .progress-bar {
    height: 4px;
    background: rgba(0, 0, 0, 0.05);
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 1.5rem;
  }

  .progress-fill {
    height: 100%;
    background: var(--bc-primary-blue);
    border-radius: 2px;
    width: 33.33%;
    transition: width 0.3s ease;
  }

  .progress-fill[data-step="2"] { width: 66.66%; }
  .progress-fill[data-step="3"] { width: 100%; }

  .progress-steps {
    display: flex;
    justify-content: space-between;
  }

  .progress-step {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.4;
    transition: opacity 0.3s ease;
  }

  .progress-step.active {
    opacity: 1;
  }

  .step-number {
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.05);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .progress-step.active .step-number {
    background: var(--bc-primary-blue);
    color: white;
  }

  .step-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--bc-primary-blue);
  }

  .modal-content {
    display: flex;
    height: auto;
    max-height: calc(85vh - 160px);
  }

  .modal-sidebar {
    width: 340px;
    background: linear-gradient(135deg, var(--bc-primary-blue), #1e3a8a);
    padding: 2rem 1.5rem;
    color: white;
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
  }

  .modal-sidebar::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
    transform: rotate(45deg);
    opacity: 0.3;
  }

  .sidebar-badge {
    display: inline-block;
    font-size: 0.7rem;
    font-weight: 700;
    letter-spacing: 0.1em;
    padding: 0.4rem 0.8rem;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 999px;
    margin-bottom: 1.5rem;
  }

  .sidebar-content h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    font-weight: 700;
  }

  .sidebar-content > p {
    opacity: 0.9;
    margin-bottom: 2rem;
    font-size: 0.95rem;
  }

  .trust-indicators {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    margin-bottom: auto;
  }

  .trust-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }

  .trust-icon {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.15);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .trust-icon svg {
    width: 20px;
    height: 20px;
    color: white;
  }

  .trust-item > div:last-child {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
  }

  .trust-item strong {
    font-size: 0.9rem;
    font-weight: 600;
    display: block;
  }

  .trust-item span {
    font-size: 0.8rem;
    opacity: 0.8;
  }

  .social-proof {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    padding: 1rem;
    margin-top: auto;
    backdrop-filter: blur(10px);
  }

  .proof-avatars {
    display: flex;
    align-items: center;
    gap: -8px;
    margin-bottom: 0.5rem;
  }

  .avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: #cbd5e1;
    border: 2px solid white;
    margin-left: -8px;
    position: relative;
    overflow: hidden;
  }

  .avatar:first-child {
    margin-left: 0;
    background: #94a3b8;
  }

  .avatar:nth-child(2) {
    background: #64748b;
  }

  .avatar:nth-child(3) {
    background: #475569;
  }

  .avatar-more {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.7rem;
    font-weight: 600;
    margin-left: -8px;
  }

  .proof-text {
    font-size: 0.85rem;
    margin: 0;
  }

  .modal-form {
    flex: 1;
    padding: 2rem;
    overflow-y: auto;
    max-height: calc(85vh - 160px);
  }

  .form-step {
    display: none;
  }

  .form-step.active {
    display: block;
    animation: fadeInStep 0.3s ease;
  }

  @keyframes fadeInStep {
    from {
      opacity: 0;
      transform: translateX(20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .form-step h2 {
    font-size: 2rem;
    color: var(--bc-primary-blue);
    margin-bottom: 0.5rem;
  }

  .step-description {
    color: var(--muted);
    margin-bottom: 2rem;
  }

  .form-group {
    margin-bottom: 1.25rem;
  }

  .form-group label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.4rem;
    color: var(--bc-primary-blue);
    font-size: 0.8rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 0.6rem 0.75rem;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 0.5rem;
    font-size: 0.925rem;
    transition: all 0.2s ease;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--bc-primary-blue);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .phone-input {
    display: flex;
    gap: 0.5rem;
  }

  .phone-input select {
    width: 140px;
  }

  .phone-input input {
    flex: 1;
  }

  .form-checkbox {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .form-checkbox input[type="checkbox"] {
    width: 1.25rem;
    height: 1.25rem;
    margin-top: 0.125rem;
    cursor: pointer;
  }

  .form-checkbox label {
    flex: 1;
    font-size: 0.875rem;
    color: var(--muted);
    cursor: pointer;
  }

  .form-checkbox label a {
    color: var(--bc-primary-blue);
    text-decoration: underline;
  }

  .error-message {
    display: block;
    color: #ef4444;
    font-size: 0.75rem;
    margin-top: 0.25rem;
  }

  .calendar-container {
    background: rgba(255, 255, 255, 0.95);
    /* Removed backdrop-filter as it causes blur issues in modal */
    border: 2px solid var(--bc-primary-blue);
    border-radius: 1.5rem;
    padding: 1.75rem;
    box-shadow: 0 8px 32px rgba(35, 7, 90, 0.1);
    overflow: hidden;
    position: relative;
  }

  .calendar-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 60px;
    background: linear-gradient(135deg, rgba(35, 7, 90, 0.05), rgba(183, 148, 212, 0.03));
    z-index: 0;
    pointer-events: none;
  }

  .calendar-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .calendar-nav {
    width: 2.25rem;
    height: 2.25rem;
    border: none;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .calendar-nav:hover {
    background: var(--bc-primary-blue);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.2);
  }

  .calendar-month {
    font-size: 1.375rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    letter-spacing: -0.02em;
  }

  .calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
    margin-bottom: 1rem;
    padding: 0.75rem 0;
    border-bottom: 2px solid rgba(183, 148, 212, 0.1);
  }

  .calendar-weekdays span {
    text-align: center;
    font-size: 0.8rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    opacity: 0.7;
  }

  .calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
    position: relative;
    z-index: 2;
  }

  .calendar-day {
    aspect-ratio: 1;
    border-radius: 0.875rem;
    background: rgba(248, 245, 255, 0.8);
    /* Removed backdrop-filter to prevent blur issues in modal */
    border: 1px solid rgba(183, 148, 212, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.925rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    color: var(--bc-primary-blue);
  }

  .calendar-day:hover:not(.disabled):not(.selected) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.1);
    border-color: var(--bc-primary-blue);
    border-width: 2px;
    z-index: 10;
    color: var(--bc-primary-blue);
  }

  .calendar-day.available {
    background: linear-gradient(135deg, rgba(35, 7, 90, 0.05), rgba(183, 148, 212, 0.03));
    border-color: var(--bc-primary-blue);
    color: var(--bc-primary-blue);
    font-weight: 700;
  }

  .calendar-day.available::after {
    content: '';
    position: absolute;
    bottom: 0.35rem;
    left: 50%;
    transform: translateX(-50%);
    width: 5px;
    height: 5px;
    background: var(--bc-cta-pink);
    border-radius: 50%;
    box-shadow: 0 0 0 2px rgba(255, 20, 147, 0.2);
  }

  /* Selection styles using both class and data attribute for maximum specificity */
  .calendar-day.selected,
  .calendar-day.selected:hover,
  .calendar-day.selected:focus,
  .calendar-day[data-selected="true"],
  .calendar-day[data-selected="true"]:hover,
  .calendar-day[data-selected="true"]:focus,
  button.calendar-day.selected,
  button.calendar-day.selected:hover,
  button.calendar-day.selected:focus,
  button.calendar-day[data-selected="true"],
  button.calendar-day[data-selected="true"]:hover,
  button.calendar-day[data-selected="true"]:focus {
    background: var(--bc-primary-blue) !important;
    color: white !important;
    font-weight: 700 !important;
    transform: scale(1.1) !important;
    border: 3px solid var(--bc-primary-blue) !important;
    box-shadow: 0 8px 24px rgba(35, 7, 90, 0.3) !important;
    z-index: 100 !important;
    border-radius: 50% !important;
    position: relative !important;
  }

  /* Hide the available indicator on selected days */
  .calendar-day.selected::after,
  .calendar-day[data-selected="true"]::after {
    display: none !important;
  }

  .calendar-day.disabled {
    opacity: 0.3;
    cursor: not-allowed;
    background: rgba(0, 0, 0, 0.02);
  }

  .calendar-day.today {
    background: linear-gradient(135deg, rgba(255, 20, 147, 0.1), rgba(183, 148, 212, 0.08));
    border: 2px solid var(--bc-cta-pink);
    animation: subtlePulse 3s infinite;
  }

  @keyframes subtlePulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }

  @keyframes confirmSelection {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  /* Add active state for immediate feedback */
  .calendar-day:active:not(.disabled),
  .time-slot:active {
    transform: scale(0.95) !important;
    transition: transform 0.1s ease !important;
  }

  .time-slots {
    margin-top: 2rem;
    padding: 1.5rem;
    background: linear-gradient(135deg, rgba(255, 20, 147, 0.03), rgba(183, 148, 212, 0.02));
    border-radius: 1rem;
    border: 1px solid rgba(183, 148, 212, 0.15);
  }

  .time-slots h3 {
    font-size: 1.125rem;
    font-weight: 700;
    margin-bottom: 1.25rem;
    color: var(--bc-primary-blue);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .time-slots h3::before {
    content: '🕐';
    font-size: 1.25rem;
    filter: grayscale(0.5);
  }

  .slots-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));
    gap: 0.75rem;
  }

  .time-slot {
    padding: 0.875rem 1.25rem;
    border-radius: 2rem;
    background: white;
    border: 2px solid rgba(183, 148, 212, 0.25);
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    position: relative;
    overflow: visible;
  }

  .time-slot::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 20, 147, 0.1), rgba(183, 148, 212, 0.1));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .time-slot:hover:not(.selected) {
    transform: translateY(-1px);
    box-shadow: 0 3px 10px rgba(35, 7, 90, 0.1);
    border-color: var(--bc-primary-blue);
    border-width: 3px;
  }

  .time-slot:hover:not(.selected)::before {
    opacity: 0;
  }

  /* Time slot selection styles with data attributes */
  .time-slot.selected,
  .time-slot.selected:hover,
  .time-slot.selected:focus,
  .time-slot[data-selected="true"],
  .time-slot[data-selected="true"]:hover,
  .time-slot[data-selected="true"]:focus,
  button.time-slot.selected,
  button.time-slot.selected:hover,
  button.time-slot.selected:focus,
  button.time-slot[data-selected="true"],
  button.time-slot[data-selected="true"]:hover,
  button.time-slot[data-selected="true"]:focus {
    background: var(--bc-primary-blue) !important;
    color: white !important;
    font-weight: 700 !important;
    transform: scale(1.05) !important;
    border: 3px solid var(--bc-primary-blue) !important;
    box-shadow: 0 6px 20px rgba(35, 7, 90, 0.3) !important;
    z-index: 100 !important;
    border-radius: 24px !important;
    position: relative !important;
  }

  .flexible-btn {
    width: 100%;
    margin-top: 1.5rem;
    padding: 1rem;
    border: 2px dashed rgba(183, 148, 212, 0.3);
    border-radius: 0.875rem;
    background: linear-gradient(135deg, rgba(255, 20, 147, 0.02), rgba(183, 148, 212, 0.01));
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    color: var(--bc-primary-blue);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.925rem;
    font-weight: 600;
  }

  .flexible-btn:hover {
    border-color: var(--bc-cta-pink);
    background: linear-gradient(135deg, rgba(255, 20, 147, 0.05), rgba(183, 148, 212, 0.03));
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.1);
  }

  .flexible-btn svg {
    color: var(--bc-cta-pink);
  }

  .confirmation-summary {
    background: #f9fafb;
    border-radius: 1rem;
    padding: 2rem;
  }

  .summary-section {
    margin-bottom: 2rem;
  }

  .summary-section h3 {
    font-size: 1.125rem;
    margin-bottom: 1rem;
    color: var(--bc-primary-blue);
  }

  .summary-list {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 0.5rem 1rem;
  }

  .summary-list dt {
    font-weight: 500;
    color: var(--muted);
    font-size: 0.875rem;
  }

  .summary-list dd {
    color: var(--bc-primary-blue);
    margin: 0;
  }

  .appointment-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: white;
    border-radius: 0.75rem;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  .appointment-card svg {
    color: var(--bc-primary-blue);
  }

  .appointment-card p {
    margin: 0;
    color: var(--bc-primary-blue);
    font-weight: 500;
  }

  .additional-info {
    margin-top: 1.5rem;
  }

  .additional-info label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--bc-primary-blue);
    font-size: 0.875rem;
  }

  .additional-info textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 0.5rem;
    resize: vertical;
  }

  .form-success {
    text-align: center;
    padding: 3rem;
  }

  .success-icon {
    margin-bottom: 2rem;
  }

  .success-icon svg {
    color: #10b981;
  }

  .form-success h2 {
    font-size: 2rem;
    color: var(--bc-primary-blue);
    margin-bottom: 1rem;
  }

  .form-success p {
    color: var(--muted);
    margin-bottom: 1rem;
  }

  .success-detail {
    font-weight: 500;
    color: var(--bc-primary-blue);
  }

  .success-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 2rem;
  }

  .modal-footer {
    padding: 1rem 2rem;
    background: #f8fafc;
    border-top: 1px solid rgba(0, 0, 0, 0.05);
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .footer-spacer {
    flex: 1;
  }

  .btn-back,
  .btn-next,
  .btn-primary,
  .btn-secondary {
    padding: 0.625rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .btn-back {
    background: white;
    color: #64748b;
    border: 1px solid #e2e8f0;
  }

  .btn-back:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
  }

  .btn-back svg {
    width: 14px;
    height: 14px;
  }

  .btn-next,
  .btn-primary {
    background: var(--bc-primary-blue);
    color: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .btn-next:hover,
  .btn-primary:hover {
    background: #1e3a8a;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(37, 99, 235, 0.2);
  }

  .btn-next svg {
    width: 14px;
    height: 14px;
  }

  .btn-secondary {
    background: rgba(0, 0, 0, 0.05);
    color: var(--bc-primary-blue);
  }

  .btn-secondary:hover {
    background: rgba(0, 0, 0, 0.1);
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .modal-container {
      width: 100%;
      height: 100%;
      max-height: 100vh;
      border-radius: 0;
    }

    .modal-content {
      height: calc(100vh - 180px);
    }

    .modal-sidebar {
      display: none;
    }

    .modal-form {
      padding: 1.5rem;
    }

    .progress-steps {
      justify-content: center;
      gap: 1rem;
    }

    .step-label {
      display: none;
    }

    .calendar-weekdays,
    .calendar-days {
      gap: 0.25rem;
    }

    .slots-grid {
      grid-template-columns: repeat(3, 1fr);
    }

    .success-actions {
      flex-direction: column;
    }

    .modal-footer {
      padding: 1rem;
    }
  }
</style>

<script>
  // Registration Modal JavaScript
  let currentStep = 1;
  const totalSteps = 3;
  let formData = {};
  let selectedDate = null;
  let selectedTime = null;

  function initRegistrationModal() {
    const modal = document.getElementById('registrationModal');
    const overlay = modal?.querySelector('.modal-overlay');
    const closeBtn = modal?.querySelector('.modal-close');
    const backBtn = modal?.querySelector('.btn-back');
    const nextBtn = modal?.querySelector('.btn-next');
    const courseSelect = document.getElementById('courseInterest');
    const childrenFields = document.getElementById('childrenFields');

    // Course type change handler
    courseSelect?.addEventListener('change', function() {
      if (this.value === 'children') {
        childrenFields.style.display = 'block';
      } else {
        childrenFields.style.display = 'none';
      }
    });

    // Navigation handlers
    backBtn?.addEventListener('click', () => navigateStep('back'));
    nextBtn?.addEventListener('click', () => navigateStep('next'));
    overlay?.addEventListener('click', closeModal);
    closeBtn?.addEventListener('click', closeModal);

    // Initialize calendar
    initCalendar();

    // Form validation
    initFormValidation();

    // Auto-save to localStorage
    initAutoSave();
  }

  function openRegistrationModal(courseType = 'adults', location = '') {
    const modal = document.getElementById('registrationModal');
    if (modal) {
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';

      // Set default values if provided
      if (courseType) {
        const courseSelect = document.getElementById('courseInterest');
        if (courseSelect) courseSelect.value = courseType;
      }

      if (location) {
        const locationSelect = document.getElementById('location');
        if (locationSelect) locationSelect.value = location;
      }

      // Load saved data if exists
      loadSavedData();
    }
  }

  function closeModal() {
    const modal = document.getElementById('registrationModal');
    if (modal) {
      modal.classList.remove('active');
      document.body.style.overflow = '';
    }
  }

  window.closeRegistrationModal = closeModal;

  function navigateStep(direction) {
    if (direction === 'next') {
      if (!validateCurrentStep()) return;

      if (currentStep === totalSteps) {
        submitRegistration();
        return;
      }

      saveStepData();
      currentStep++;
    } else if (direction === 'back' && currentStep > 1) {
      currentStep--;
    }

    updateModalStep();
  }

  function updateModalStep() {
    // Update progress bar
    const progressFill = document.querySelector('.progress-fill');
    if (progressFill) {
      progressFill.setAttribute('data-step', currentStep);
    }

    // Update progress steps
    document.querySelectorAll('.progress-step').forEach((step, index) => {
      step.classList.toggle('active', index < currentStep);
    });

    // Update form steps
    document.querySelectorAll('.form-step').forEach(step => {
      const stepNum = parseInt(step.getAttribute('data-step'));
      step.classList.toggle('active', stepNum === currentStep);
    });

    // Update buttons
    const backBtn = document.querySelector('.btn-back');
    const nextBtn = document.querySelector('.btn-next');

    if (backBtn) {
      backBtn.style.display = currentStep === 1 ? 'none' : 'block';
    }

    if (nextBtn) {
      nextBtn.textContent = currentStep === totalSteps ? 'Complete Registration' : 'Continue';
    }

    // Update summary if on confirmation step
    if (currentStep === 3) {
      updateConfirmationSummary();
    }
  }

  function validateCurrentStep() {
    const currentFormStep = document.querySelector(`.form-step[data-step="${currentStep}"]`);
    const requiredFields = currentFormStep?.querySelectorAll('[required]');
    let isValid = true;

    requiredFields?.forEach(field => {
      if (!field.value.trim()) {
        showFieldError(field, 'This field is required');
        isValid = false;
      } else if (field.type === 'email' && !validateEmail(field.value)) {
        showFieldError(field, 'Please enter a valid email address');
        isValid = false;
      } else {
        clearFieldError(field);
      }
    });

    // Special validation for step 2 (calendar)
    if (currentStep === 2) {
      const flexibleBtn = document.querySelector('.flexible-btn');
      if (!selectedDate && !selectedTime && !flexibleBtn?.classList.contains('selected')) {
        alert('Please select a consultation time or choose the flexible option');
        isValid = false;
      }
    }

    // Special validation for step 3 (terms)
    if (currentStep === 3) {
      const termsCheckbox = document.getElementById('terms');
      if (!termsCheckbox?.checked) {
        showFieldError(termsCheckbox, 'You must accept the terms and conditions');
        isValid = false;
      }
    }

    return isValid;
  }

  function validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  function showFieldError(field, message) {
    const errorElement = field.parentElement?.querySelector('.error-message');
    if (errorElement) {
      errorElement.textContent = message;
      field.classList.add('error');
    }
  }

  function clearFieldError(field) {
    const errorElement = field.parentElement?.querySelector('.error-message');
    if (errorElement) {
      errorElement.textContent = '';
      field.classList.remove('error');
    }
  }

  function saveStepData() {
    const inputs = document.querySelectorAll(`.form-step[data-step="${currentStep}"] input, .form-step[data-step="${currentStep}"] select, .form-step[data-step="${currentStep}"] textarea`);

    inputs.forEach(input => {
      if (input.type === 'checkbox') {
        formData[input.name] = input.checked;
      } else if (input.type === 'radio') {
        if (input.checked) {
          formData[input.name] = input.value;
        }
      } else {
        formData[input.name] = input.value;
      }
    });

    // Save calendar selection
    if (currentStep === 2) {
      formData.selectedDate = selectedDate;
      formData.selectedTime = selectedTime;
    }

    // Save to localStorage
    localStorage.setItem('registrationFormData', JSON.stringify(formData));
  }

  function loadSavedData() {
    const savedData = localStorage.getItem('registrationFormData');
    if (savedData) {
      formData = JSON.parse(savedData);

      // Populate form fields
      Object.keys(formData).forEach(key => {
        const field = document.querySelector(`[name="${key}"]`);
        if (field) {
          if (field.type === 'checkbox') {
            field.checked = formData[key];
          } else {
            field.value = formData[key];
          }
        }
      });
    }
  }

  function initAutoSave() {
    const inputs = document.querySelectorAll('.modal-form input, .modal-form select, .modal-form textarea');

    inputs.forEach(input => {
      input.addEventListener('change', () => {
        saveStepData();
      });
    });
  }

  function initCalendar() {
    const calendarDays = document.getElementById('calendarDays');
    const currentDate = new Date();

    // Use an object to track current displayed month/year
    const calendarState = {
      month: currentDate.getMonth(),
      year: currentDate.getFullYear()
    };

    if (calendarDays) {
      renderCalendar(calendarState.month, calendarState.year);
    }

    // Calendar navigation with state updates
    document.querySelector('.calendar-nav.prev')?.addEventListener('click', () => {
      calendarState.month--;
      if (calendarState.month < 0) {
        calendarState.month = 11;
        calendarState.year--;
      }
      renderCalendar(calendarState.month, calendarState.year);
    });

    document.querySelector('.calendar-nav.next')?.addEventListener('click', () => {
      calendarState.month++;
      if (calendarState.month > 11) {
        calendarState.month = 0;
        calendarState.year++;
      }
      renderCalendar(calendarState.month, calendarState.year);
    });

    // Flexible button
    document.querySelector('.flexible-btn')?.addEventListener('click', function() {
      this.classList.toggle('selected');
      selectedDate = 'flexible';
      selectedTime = 'flexible';
    });
  }

  function renderCalendar(month, year) {
    const calendarDays = document.getElementById('calendarDays');
    if (!calendarDays) return;

    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    calendarDays.innerHTML = '';

    // Empty cells before first day
    for (let i = 0; i < (firstDay || 7) - 1; i++) {
      const emptyDiv = document.createElement('div');
      emptyDiv.className = 'calendar-day disabled';
      calendarDays.appendChild(emptyDiv);
    }

    // Calendar days - make all future weekdays available
    for (let day = 1; day <= daysInMonth; day++) {
      const dayDate = new Date(year, month, day);
      dayDate.setHours(0, 0, 0, 0);
      const isToday = dayDate.getTime() === today.getTime();
      const isPast = dayDate < today;
      const isWeekend = dayDate.getDay() === 0 || dayDate.getDay() === 6;

      const dayButton = document.createElement('button');
      dayButton.type = 'button';
      dayButton.className = 'calendar-day';
      dayButton.textContent = day;
      dayButton.setAttribute('data-date', dayDate.toISOString().split('T')[0]);
      dayButton.setAttribute('data-selected', 'false');
      dayButton.setAttribute('aria-pressed', 'false');
      dayButton.setAttribute('aria-label', `Select ${dayDate.toLocaleDateString()}`);

      if (isToday) dayButton.classList.add('today');

      if (isPast) {
        dayButton.classList.add('disabled');
        dayButton.disabled = true;
      } else if (isWeekend) {
        dayButton.classList.add('disabled');
        dayButton.disabled = true;
      } else {
        // All future weekdays are available
        dayButton.classList.add('available');
        dayButton.addEventListener('click', (e) => selectDate(dayDate, e));

        // Restore selection if this was previously selected
        if (window.selectedDateElement &&
            window.selectedDateElement.date === day &&
            window.selectedDateElement.month === month &&
            window.selectedDateElement.year === year) {
          dayButton.classList.add('selected');
        }
      }

      calendarDays.appendChild(dayButton);
    }

    // Update month display
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                       'July', 'August', 'September', 'October', 'November', 'December'];
    const monthDisplay = document.querySelector('.calendar-month');
    if (monthDisplay) {
      monthDisplay.textContent = `${monthNames[month]} ${year}`;
    }
  }

  function selectDate(date, event) {
    selectedDate = date;

    // Update visual selection - remove from all days first
    document.querySelectorAll('.calendar-day').forEach(day => {
      day.classList.remove('selected');
      day.setAttribute('data-selected', 'false');
      day.setAttribute('aria-pressed', 'false');
    });

    // Add selected class to clicked element
    if (event && event.currentTarget) {
      event.currentTarget.classList.add('selected');
      event.currentTarget.setAttribute('data-selected', 'true');
      event.currentTarget.setAttribute('aria-pressed', 'true');

      // Force style recalculation to ensure CSS is applied
      void event.currentTarget.offsetHeight;

      // Debug: Log to verify class is added and styles computed
      console.log('Selected date:', date);
      console.log('Element classes:', event.currentTarget.className);
      console.log('Data-selected:', event.currentTarget.getAttribute('data-selected'));
      console.log('Computed background:', window.getComputedStyle(event.currentTarget).backgroundColor);

      // Store the selected date element to maintain selection when navigating months
      window.selectedDateElement = {
        date: date.getDate(),
        month: date.getMonth(),
        year: date.getFullYear()
      };
    }

    // Show time slots
    showTimeSlots(date);
  }

  function showTimeSlots(date) {
    const timeSlotsContainer = document.getElementById('timeSlots');
    const slotsGrid = timeSlotsContainer?.querySelector('.slots-grid');

    if (timeSlotsContainer && slotsGrid) {
      timeSlotsContainer.style.display = 'block';

      // Generate available time slots
      const morningSlots = ['09:00', '09:30', '10:00', '10:30', '11:00', '11:30'];
      const afternoonSlots = ['14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'];

      // Show most slots, randomly remove just a few to simulate bookings
      const allSlots = [...morningSlots, ...afternoonSlots];
      const availableSlots = allSlots.filter(() => Math.random() > 0.15); // 85% chance each slot is available

      // Ensure at least some slots are always available
      if (availableSlots.length < 4) {
        availableSlots.push(...allSlots.slice(0, 6));
      }

      slotsGrid.innerHTML = '';

      // Add a smooth fade-in animation
      timeSlotsContainer.style.opacity = '0';
      setTimeout(() => {
        timeSlotsContainer.style.transition = 'opacity 0.3s ease';
        timeSlotsContainer.style.opacity = '1';
      }, 10);

      availableSlots.forEach((time, index) => {
        const slot = document.createElement('button');
        slot.type = 'button';
        slot.className = 'time-slot';
        slot.textContent = time;
        slot.setAttribute('data-time', time);
        slot.setAttribute('data-selected', 'false');
        slot.setAttribute('aria-pressed', 'false');
        slot.setAttribute('aria-label', `Select ${time} consultation time`);
        slot.style.animationDelay = `${index * 30}ms`;
        slot.style.animation = 'fadeInUp 0.4s ease forwards';
        slot.addEventListener('click', (e) => selectTime(time, e));

        // Restore selection if this time was previously selected
        if (window.selectedTimeSlot === time) {
          slot.classList.add('selected');
        }

        slotsGrid.appendChild(slot);
      });

      // Add keyframe animation if not already present
      if (!document.getElementById('timeSlotAnimation')) {
        const style = document.createElement('style');
        style.id = 'timeSlotAnimation';
        style.textContent = `
          @keyframes fadeInUp {
            from {
              opacity: 0;
              transform: translateY(10px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }
        `;
        document.head.appendChild(style);
      }
    }
  }

  function selectTime(time, event) {
    selectedTime = time;

    // Update visual selection - remove from all slots first
    document.querySelectorAll('.time-slot').forEach(slot => {
      slot.classList.remove('selected');
      slot.setAttribute('data-selected', 'false');
      slot.setAttribute('aria-pressed', 'false');
    });

    // Add selected class to clicked element
    if (event && event.currentTarget) {
      event.currentTarget.classList.add('selected');
      event.currentTarget.setAttribute('data-selected', 'true');
      event.currentTarget.setAttribute('aria-pressed', 'true');

      // Force style recalculation
      void event.currentTarget.offsetHeight;

      // Store the selected time to maintain state
      window.selectedTimeSlot = time;

      // Add a subtle animation to confirm selection
      event.currentTarget.style.animation = 'confirmSelection 0.3s ease';
      setTimeout(() => {
        if (event.currentTarget) {
          event.currentTarget.style.animation = '';
        }
      }, 300);
    }
  }

  function updateConfirmationSummary() {
    document.getElementById('summaryName').textContent = formData.fullName || '-';
    document.getElementById('summaryEmail').textContent = formData.email || '-';
    document.getElementById('summaryPhone').textContent = `${formData.phoneCode || ''} ${formData.phone || '-'}`;
    document.getElementById('summaryCourse').textContent = formData.courseInterest || '-';
    document.getElementById('summaryLocation').textContent = formData.location || '-';

    if (selectedDate === 'flexible') {
      document.getElementById('summaryDate').textContent = 'Flexible scheduling requested';
      document.getElementById('summaryTime').textContent = 'We will contact you with options';
    } else if (selectedDate && selectedTime) {
      document.getElementById('summaryDate').textContent = selectedDate.toLocaleDateString();
      document.getElementById('summaryTime').textContent = selectedTime;
    }
  }

  function submitRegistration() {
    saveStepData();

    // Hide form and show success
    document.querySelectorAll('.form-step').forEach(step => {
      step.classList.remove('active');
    });
    document.querySelector('.modal-footer').style.display = 'none';
    document.querySelector('.form-success').style.display = 'block';

    // Send data to backend (mock)
    console.log('Registration submitted:', formData);

    // Clear saved data
    localStorage.removeItem('registrationFormData');

    // Send confirmation email (would be handled by backend)
    // ...
  }

  function initFormValidation() {
    // Real-time validation for email
    document.getElementById('email')?.addEventListener('blur', function() {
      if (this.value && !validateEmail(this.value)) {
        showFieldError(this, 'Please enter a valid email address');
      } else {
        clearFieldError(this);
      }
    });

    // Real-time validation for phone
    document.getElementById('phone')?.addEventListener('blur', function() {
      if (this.value && !/^\d{9,}$/.test(this.value.replace(/\s/g, ''))) {
        showFieldError(this, 'Please enter a valid phone number');
      } else {
        clearFieldError(this);
      }
    });
  }

  // Initialize on DOM load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initRegistrationModal);
  } else {
    // DOM is already loaded
    initRegistrationModal();
  }

  // Export function for use in other components
  window.openRegistrationModal = openRegistrationModal;
</script>