---
import DashboardLayout from '../../components/portal/DashboardLayout.astro';
import SidebarNav from '../../components/portal/SidebarNav.astro';

// Get current date info
const now = new Date();
const currentMonth = now.getMonth(); // 0-11
const currentYear = now.getFullYear();
const currentDay = now.getDate();

// Mock data for classes on specific days
const classSchedule = {
  1: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
  3: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
  5: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
  7: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
  8: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
  10: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
  12: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
  14: [{ name: 'Midterm Exam', time: '10:00-12:00', type: 'exam', color: '#ff1493' }],
  15: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
  17: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
  19: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
  20: [{ name: 'Cultural Workshop', time: '15:00-17:00', type: 'event', color: '#22c55e' }],
  22: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
  24: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
  26: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
  27: [{ name: 'Holiday Break', time: 'All Day', type: 'holiday', color: '#f59e0b' }],
  28: [{ name: 'Holiday Break', time: 'All Day', type: 'holiday', color: '#f59e0b' }],
  29: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
};

// Today's schedule
const todaysSchedule = [
  {
    id: 1,
    courseName: 'Business English B2',
    time: '18:00 - 19:30',
    teacher: 'Sarah Williams',
    room: 'Room 203',
    type: 'In-person',
    status: 'upcoming'
  },
  {
    id: 2,
    courseName: 'Speaking Focus Group',
    time: '19:00 - 20:00',
    teacher: 'Emma Thompson',
    room: 'Room 105',
    type: 'In-person',
    status: 'upcoming'
  }
];

// Upcoming events for next 7 days
const upcomingEvents = [
  {
    id: 1,
    title: 'IELTS Preparation',
    date: 'Tomorrow',
    time: '17:00 - 18:30',
    type: 'class',
    location: 'Online'
  },
  {
    id: 2,
    title: 'Business English B2',
    date: 'Nov 3',
    time: '18:00 - 19:30',
    type: 'class',
    location: 'Room 203'
  },
  {
    id: 3,
    title: 'Speaking Focus Group',
    date: 'Nov 3',
    time: '19:00 - 20:00',
    type: 'class',
    location: 'Room 105'
  },
  {
    id: 4,
    title: 'IELTS Preparation',
    date: 'Nov 5',
    time: '17:00 - 18:30',
    type: 'class',
    location: 'Online'
  },
  {
    id: 5,
    title: 'Midterm Exam',
    date: 'Nov 7',
    time: '10:00 - 12:00',
    type: 'exam',
    location: 'Room 301'
  },
  {
    id: 6,
    title: 'Cultural Workshop',
    date: 'Nov 13',
    time: '15:00 - 17:00',
    type: 'event',
    location: 'Main Hall'
  }
];

// Holidays
const holidays = [
  {
    id: 1,
    name: 'Thanksgiving Break',
    startDate: 'Nov 27',
    endDate: 'Nov 28',
    type: 'School Holiday'
  },
  {
    id: 2,
    name: 'Winter Break',
    startDate: 'Dec 20',
    endDate: 'Jan 3',
    type: 'School Holiday'
  }
];
---

<DashboardLayout title="Schedule" currentPage="schedule">
  <SidebarNav slot="sidebar" currentPage="schedule" />

  <div slot="header">
    <div>
      <h1 class="header-title">My Schedule</h1>
      <p class="header-subtitle">View and manage your classes, exams, and events</p>
    </div>
    <div class="header-actions">
      <button class="action-btn-header">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="10"></circle>
          <polyline points="12 6 12 12 16 14"></polyline>
        </svg>
        Today
      </button>
      <button class="action-btn-header primary">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
        Add Event
      </button>
    </div>
  </div>

  <!-- Filter Buttons -->
  <div class="filter-section">
    <button class="filter-btn active" data-filter="all">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="3" y="3" width="7" height="7"></rect>
        <rect x="14" y="3" width="7" height="7"></rect>
        <rect x="14" y="14" width="7" height="7"></rect>
        <rect x="3" y="14" width="7" height="7"></rect>
      </svg>
      All Events
    </button>
    <button class="filter-btn" data-filter="classes">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
        <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
      </svg>
      Classes
    </button>
    <button class="filter-btn" data-filter="exams">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
        <polyline points="14 2 14 8 20 8"></polyline>
        <line x1="16" y1="13" x2="8" y2="13"></line>
        <line x1="16" y1="17" x2="8" y2="17"></line>
      </svg>
      Exams
    </button>
    <button class="filter-btn" data-filter="holidays">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <path d="M12 6v6l4 2"></path>
      </svg>
      Holidays
    </button>
    <button class="filter-btn" data-filter="events">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
      </svg>
      Events
    </button>
  </div>

  <!-- Calendar Section -->
  <section class="calendar-section">
    <div class="calendar-header">
      <div>
        <h2 class="calendar-title">November 2024</h2>
        <p class="calendar-subtitle">Click on any day to view details</p>
      </div>
      <div class="calendar-controls">
        <button class="calendar-nav-btn" id="prevMonth">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>
        <button class="calendar-nav-btn" id="nextMonth">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>
    </div>

    <div class="calendar-grid-container">
      <!-- Days of week header -->
      <div class="calendar-weekdays">
        <div class="weekday">Mon</div>
        <div class="weekday">Tue</div>
        <div class="weekday">Wed</div>
        <div class="weekday">Thu</div>
        <div class="weekday">Fri</div>
        <div class="weekday weekend">Sat</div>
        <div class="weekday weekend">Sun</div>
      </div>

      <!-- Calendar days grid -->
      <div class="calendar-grid" id="calendarGrid">
        <!-- Calendar will be generated by JavaScript -->
      </div>
    </div>
  </section>

  <!-- Two Column Layout -->
  <div class="content-grid">
    <!-- Today's Schedule -->
    <section class="section">
      <div class="section-header">
        <h2 class="section-title">Today's Schedule</h2>
        <span class="date-badge">{new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
      </div>
      <div class="schedule-list">
        {todaysSchedule.map((item) => (
          <div class="schedule-item">
            <div class="schedule-time">
              <div class="time-indicator"></div>
              <span>{item.time}</span>
            </div>
            <div class="schedule-content">
              <h4 class="schedule-title">{item.courseName}</h4>
              <div class="schedule-details">
                <span class="detail-item">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                  </svg>
                  {item.teacher}
                </span>
                <span class="detail-item">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                  </svg>
                  {item.room}
                </span>
                <span class={`type-badge ${item.type === 'Virtual' ? 'virtual' : 'in-person'}`}>
                  {item.type}
                </span>
              </div>
              <div class="schedule-actions">
                <button class="action-link">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                  </svg>
                  Reschedule
                </button>
                <button class="action-link cancel">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="15" y1="9" x2="9" y2="15"></line>
                    <line x1="9" y1="9" x2="15" y2="15"></line>
                  </svg>
                  Cancel
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- Upcoming Events -->
    <section class="section">
      <div class="section-header">
        <h2 class="section-title">Upcoming Events</h2>
        <span class="events-count">{upcomingEvents.length} events</span>
      </div>
      <div class="events-list">
        {upcomingEvents.map((event) => (
          <div class="event-item" data-type={event.type}>
            <div class={`event-icon ${event.type}`}>
              {event.type === 'class' && (
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                  <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
                </svg>
              )}
              {event.type === 'exam' && (
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                </svg>
              )}
              {event.type === 'event' && (
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                </svg>
              )}
            </div>
            <div class="event-content">
              <h4 class="event-title">{event.title}</h4>
              <div class="event-meta">
                <span class="event-date">{event.date}</span>
                <span class="event-time">{event.time}</span>
                <span class="event-location">{event.location}</span>
              </div>
            </div>
            <button class="event-more">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </button>
          </div>
        ))}
      </div>
    </section>
  </div>

  <!-- Holiday Calendar -->
  <section class="section">
    <div class="section-header">
      <h2 class="section-title">Holiday Calendar</h2>
      <a href="#" class="section-link">
        Download Calendar
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
          <polyline points="7 10 12 15 17 10"></polyline>
          <line x1="12" y1="15" x2="12" y2="3"></line>
        </svg>
      </a>
    </div>
    <div class="holiday-grid">
      {holidays.map((holiday) => (
        <div class="holiday-card">
          <div class="holiday-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
          </div>
          <div class="holiday-content">
            <h4 class="holiday-name">{holiday.name}</h4>
            <div class="holiday-dates">
              <span>{holiday.startDate}</span>
              <span class="date-separator">-</span>
              <span>{holiday.endDate}</span>
            </div>
            <span class="holiday-type">{holiday.type}</span>
          </div>
        </div>
      ))}
    </div>
  </section>

</DashboardLayout>

<style>
  /* Header Styles */
  .header-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .header-subtitle {
    font-size: 1rem;
    color: var(--bc-dark-gray);
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .action-btn-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1.25rem;
    border-radius: 12px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    color: var(--bc-primary-blue);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .action-btn-header:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
  }

  .action-btn-header.primary {
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    color: white;
    border: none;
  }

  .action-btn-header.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.2);
  }

  /* Filter Section */
  .filter-section {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(35, 7, 90, 0.08);
  }

  .filter-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1.25rem;
    border-radius: 12px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    color: var(--bc-dark-gray);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .filter-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
    color: var(--bc-primary-blue);
  }

  .filter-btn.active {
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    color: white;
    border-color: transparent;
  }

  /* Calendar Section */
  .calendar-section {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(35, 7, 90, 0.1);
  }

  .calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .calendar-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .calendar-subtitle {
    font-size: 0.875rem;
    color: var(--bc-dark-gray);
  }

  .calendar-controls {
    display: flex;
    gap: 0.5rem;
  }

  .calendar-nav-btn {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    color: var(--bc-primary-blue);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .calendar-nav-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
  }

  .calendar-grid-container {
    margin-top: 1.5rem;
  }

  .calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .weekday {
    text-align: center;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    padding: 0.75rem;
    background: rgba(35, 7, 90, 0.05);
    border-radius: 8px;
  }

  .weekday.weekend {
    background: rgba(255, 20, 147, 0.05);
    color: var(--bc-pink);
  }

  .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
  }

  .calendar-day {
    min-height: 100px;
    padding: 0.75rem;
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.5);
    border: 1px solid var(--bc-light-gray);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .calendar-day:hover {
    background: rgba(35, 7, 90, 0.02);
    border-color: var(--bc-primary-blue);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.08);
  }

  .calendar-day.today {
    background: linear-gradient(135deg, rgba(255, 20, 147, 0.08), rgba(183, 148, 212, 0.05));
    border: 2px solid var(--bc-pink);
  }

  .calendar-day.other-month {
    opacity: 0.4;
    pointer-events: none;
  }

  .day-number {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.5rem;
  }

  .calendar-day.today .day-number {
    color: var(--bc-pink);
  }

  .day-events {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .day-event {
    font-size: 0.625rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    color: white;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    font-weight: 500;
  }

  /* Content Grid */
  .content-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
    margin-bottom: 2rem;
  }

  /* Section Styles */
  .section {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 16px;
    padding: 1.5rem;
    box-shadow: 0 4px 20px rgba(35, 7, 90, 0.08);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .section-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
  }

  .date-badge {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--bc-pink);
    padding: 0.375rem 0.875rem;
    background: rgba(255, 20, 147, 0.1);
    border-radius: 8px;
  }

  .events-count {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--bc-dark-gray);
    padding: 0.375rem 0.875rem;
    background: rgba(35, 7, 90, 0.05);
    border-radius: 8px;
  }

  .section-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--bc-light-blue);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .section-link:hover {
    color: var(--bc-primary-blue);
    transform: translateX(2px);
  }

  /* Today's Schedule */
  .schedule-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .schedule-item {
    display: flex;
    gap: 1.25rem;
    padding: 1.25rem;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 12px;
    border: 1px solid var(--bc-light-gray);
    transition: all 0.2s ease;
  }

  .schedule-item:hover {
    background: rgba(35, 7, 90, 0.02);
    border-color: var(--bc-primary-blue);
  }

  .schedule-time {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    min-width: 120px;
  }

  .time-indicator {
    width: 4px;
    height: 100%;
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    border-radius: 2px;
  }

  .schedule-time span {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
  }

  .schedule-content {
    flex: 1;
  }

  .schedule-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.625rem;
  }

  .schedule-details {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 0.75rem;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    font-size: 0.8125rem;
    color: var(--bc-dark-gray);
  }

  .type-badge {
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.625rem;
    border-radius: 6px;
  }

  .type-badge.virtual {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
  }

  .type-badge.in-person {
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
  }

  .schedule-actions {
    display: flex;
    gap: 1rem;
  }

  .action-link {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    background: transparent;
    border: none;
    color: var(--bc-light-blue);
    font-size: 0.8125rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .action-link:hover {
    color: var(--bc-primary-blue);
  }

  .action-link.cancel {
    color: #ef4444;
  }

  .action-link.cancel:hover {
    color: #dc2626;
  }

  /* Upcoming Events */
  .events-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .event-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 12px;
    border: 1px solid var(--bc-light-gray);
    transition: all 0.2s ease;
  }

  .event-item:hover {
    background: rgba(35, 7, 90, 0.02);
    border-color: var(--bc-primary-blue);
    transform: translateX(4px);
  }

  .event-icon {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .event-icon.class {
    background: rgba(90, 58, 119, 0.1);
    color: var(--bc-light-blue);
  }

  .event-icon.exam {
    background: rgba(255, 20, 147, 0.1);
    color: var(--bc-pink);
  }

  .event-icon.event {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
  }

  .event-content {
    flex: 1;
  }

  .event-title {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.375rem;
  }

  .event-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    font-size: 0.75rem;
    color: var(--bc-dark-gray);
  }

  .event-date {
    font-weight: 600;
  }

  .event-more {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    color: var(--bc-dark-gray);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .event-more:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
    color: var(--bc-primary-blue);
  }

  /* Holiday Calendar */
  .holiday-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .holiday-card {
    display: flex;
    gap: 1.25rem;
    padding: 1.5rem;
    background: linear-gradient(135deg, rgba(245, 158, 11, 0.05), rgba(251, 191, 36, 0.03));
    border-radius: 16px;
    border: 1px solid rgba(245, 158, 11, 0.2);
    transition: all 0.3s ease;
  }

  .holiday-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(245, 158, 11, 0.15);
  }

  .holiday-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    background: rgba(245, 158, 11, 0.1);
    color: #f59e0b;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .holiday-content {
    flex: 1;
  }

  .holiday-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.5rem;
  }

  .holiday-dates {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: #f59e0b;
    margin-bottom: 0.5rem;
  }

  .date-separator {
    color: var(--bc-dark-gray);
  }

  .holiday-type {
    display: inline-block;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--bc-dark-gray);
    padding: 0.25rem 0.75rem;
    background: rgba(35, 7, 90, 0.05);
    border-radius: 6px;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .content-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .header-actions {
      flex-direction: column;
      width: 100%;
      gap: 0.5rem;
    }

    .action-btn-header {
      width: 100%;
      justify-content: center;
    }

    .filter-section {
      padding: 1rem;
    }

    .calendar-section {
      padding: 1rem;
    }

    .calendar-grid {
      gap: 0.25rem;
    }

    .calendar-day {
      min-height: 80px;
      padding: 0.5rem;
    }

    .day-number {
      font-size: 0.75rem;
    }

    .day-event {
      font-size: 0.5rem;
      padding: 0.125rem 0.25rem;
    }

    .schedule-item {
      flex-direction: column;
      gap: 0.75rem;
    }

    .schedule-time {
      min-width: auto;
    }

    .holiday-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Animation */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .calendar-day,
  .schedule-item,
  .event-item,
  .holiday-card {
    animation: fadeIn 0.3s ease;
  }
</style>

<script>
  // Calendar data
  const classSchedule = {
    1: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
    3: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
    5: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
    7: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
    8: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
    10: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
    12: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
    14: [{ name: 'Midterm Exam', time: '10:00-12:00', type: 'exam', color: '#ff1493' }],
    15: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
    17: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
    19: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
    20: [{ name: 'Cultural Workshop', time: '15:00-17:00', type: 'event', color: '#22c55e' }],
    22: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
    24: [{ name: 'Speaking Focus Group', time: '19:00-20:00', type: 'class', color: '#5a3a77' }],
    26: [{ name: 'IELTS Preparation', time: '17:00-18:30', type: 'class', color: '#5a3a77' }],
    27: [{ name: 'Holiday Break', time: 'All Day', type: 'holiday', color: '#f59e0b' }],
    28: [{ name: 'Holiday Break', time: 'All Day', type: 'holiday', color: '#f59e0b' }],
    29: [{ name: 'Business English B2', time: '18:00-19:30', type: 'class', color: '#5a3a77' }],
  };

  let currentMonth = 10; // November (0-indexed)
  let currentYear = 2024;
  let activeFilter = 'all';

  function generateCalendar() {
    const calendarGrid = document.getElementById('calendarGrid');
    if (!calendarGrid) return;

    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);

    let startingDayOfWeek = firstDay.getDay();
    startingDayOfWeek = startingDayOfWeek === 0 ? 6 : startingDayOfWeek - 1;

    const daysInMonth = lastDay.getDate();
    const prevLastDay = new Date(currentYear, currentMonth, 0);
    const daysInPrevMonth = prevLastDay.getDate();

    let html = '';
    const today = new Date();

    // Previous month days
    for (let i = startingDayOfWeek - 1; i >= 0; i--) {
      const day = daysInPrevMonth - i;
      html += `
        <div class="calendar-day other-month">
          <div class="day-number">${day}</div>
        </div>
      `;
    }

    // Current month days
    for (let day = 1; day <= daysInMonth; day++) {
      const isToday = today.getDate() === day &&
                     today.getMonth() === currentMonth &&
                     today.getFullYear() === currentYear;

      const events = classSchedule[day] || [];
      const filteredEvents = events.filter(event =>
        activeFilter === 'all' ||
        (activeFilter === 'classes' && event.type === 'class') ||
        (activeFilter === 'exams' && event.type === 'exam') ||
        (activeFilter === 'holidays' && event.type === 'holiday') ||
        (activeFilter === 'events' && event.type === 'event')
      );

      html += `
        <div class="calendar-day ${isToday ? 'today' : ''}">
          <div class="day-number">${day}</div>
          <div class="day-events">
            ${filteredEvents.map(event => `
              <div class="day-event" style="background-color: ${event.color};" title="${event.name} - ${event.time}">
                ${event.name}
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    // Next month days
    const totalCells = startingDayOfWeek + daysInMonth;
    const remainingCells = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7);

    for (let day = 1; day <= remainingCells; day++) {
      html += `
        <div class="calendar-day other-month">
          <div class="day-number">${day}</div>
        </div>
      `;
    }

    calendarGrid.innerHTML = html;
  }

  function updateCalendarHeader() {
    const calendarTitle = document.querySelector('.calendar-title');
    if (!calendarTitle) return;

    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                       'July', 'August', 'September', 'October', 'November', 'December'];

    calendarTitle.textContent = `${monthNames[currentMonth]} ${currentYear}`;
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    generateCalendar();

    // Month navigation
    const prevBtn = document.getElementById('prevMonth');
    const nextBtn = document.getElementById('nextMonth');

    prevBtn?.addEventListener('click', () => {
      currentMonth--;
      if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
      }
      updateCalendarHeader();
      generateCalendar();
    });

    nextBtn?.addEventListener('click', () => {
      currentMonth++;
      if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
      }
      updateCalendarHeader();
      generateCalendar();
    });

    // Filter buttons
    const filterBtns = document.querySelectorAll('.filter-btn');
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        activeFilter = btn.dataset.filter || 'all';
        generateCalendar();
      });
    });
  });
</script>
