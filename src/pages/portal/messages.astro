---
import DashboardLayout from '../../components/portal/DashboardLayout.astro';
import SidebarNav from '../../components/portal/SidebarNav.astro';

// Mock data for conversations
const conversations = [
  {
    id: 1,
    name: 'Sarah Williams',
    role: 'Business English Teacher',
    avatar: 'SW',
    lastMessage: 'Great progress on your presentation! Keep up the excellent work.',
    timestamp: '10 mins ago',
    unread: 2,
    isRead: false,
    isPriority: false
  },
  {
    id: 2,
    name: 'James Morrison',
    role: 'IELTS Preparation Teacher',
    avatar: 'JM',
    lastMessage: 'Your IELTS practice test results are ready for review.',
    timestamp: '1 hour ago',
    unread: 1,
    isRead: false,
    isPriority: true
  },
  {
    id: 3,
    name: 'Admin Office',
    role: 'Administration',
    avatar: 'AD',
    lastMessage: 'Your course registration for next term has been confirmed.',
    timestamp: '2 hours ago',
    unread: 0,
    isRead: true,
    isPriority: false
  },
  {
    id: 4,
    name: 'Emma Thompson',
    role: 'Speaking Focus Teacher',
    avatar: 'ET',
    lastMessage: 'Thank you for your participation in today\'s session!',
    timestamp: 'Yesterday',
    unread: 0,
    isRead: true,
    isPriority: false
  },
  {
    id: 5,
    name: 'Student Support',
    role: 'Support Team',
    avatar: 'SS',
    lastMessage: 'Your request for learning materials has been processed.',
    timestamp: '2 days ago',
    unread: 0,
    isRead: true,
    isPriority: false
  }
];

// Mock data for message thread
const messageThread = [
  {
    id: 1,
    sender: 'Sarah Williams',
    avatar: 'SW',
    message: 'Hi John! I reviewed your latest presentation assignment. You did an excellent job with the structure and content.',
    timestamp: '2:30 PM',
    isOwn: false
  },
  {
    id: 2,
    sender: 'You',
    avatar: 'JD',
    message: 'Thank you so much, Sarah! I really worked hard on it. Do you have any suggestions for improvement?',
    timestamp: '2:35 PM',
    isOwn: true
  },
  {
    id: 3,
    sender: 'Sarah Williams',
    avatar: 'SW',
    message: 'Just focus on your pronunciation during the delivery. Maybe we can schedule a practice session this week?',
    timestamp: '2:40 PM',
    isOwn: false
  },
  {
    id: 4,
    sender: 'You',
    avatar: 'JD',
    message: 'That would be great! I\'m available Thursday afternoon if that works for you.',
    timestamp: '2:42 PM',
    isOwn: true
  },
  {
    id: 5,
    sender: 'Sarah Williams',
    avatar: 'SW',
    message: 'Great progress on your presentation! Keep up the excellent work.',
    timestamp: '2:45 PM',
    isOwn: false
  }
];

// Mock data for announcements
const announcements = [
  {
    id: 1,
    title: 'Holiday Schedule Update',
    message: 'The British Council will be closed from December 24-26. All classes will resume on December 27.',
    timestamp: '3 days ago',
    category: 'Important',
    isPinned: true
  },
  {
    id: 2,
    title: 'New Learning Resources Available',
    message: 'We\'ve added new interactive materials for IELTS preparation. Check them out in the Resources section.',
    timestamp: '1 week ago',
    category: 'Update',
    isPinned: false
  },
  {
    id: 3,
    title: 'Upcoming IELTS Exam Registration',
    message: 'Registration for the March IELTS exam is now open. Limited slots available.',
    timestamp: '2 weeks ago',
    category: 'Event',
    isPinned: false
  }
];

// Mock data for teacher contacts
const teachers = [
  {
    id: 1,
    name: 'Sarah Williams',
    subject: 'Business English',
    avatar: 'SW',
    status: 'online'
  },
  {
    id: 2,
    name: 'James Morrison',
    subject: 'IELTS Preparation',
    avatar: 'JM',
    status: 'online'
  },
  {
    id: 3,
    name: 'Emma Thompson',
    subject: 'Speaking Focus',
    avatar: 'ET',
    status: 'offline'
  },
  {
    id: 4,
    name: 'Michael Chen',
    subject: 'Grammar & Writing',
    avatar: 'MC',
    status: 'away'
  }
];
---

<DashboardLayout title="Messages" currentPage="messages">
  <SidebarNav slot="sidebar" currentPage="messages" />

  <div slot="header">
    <div>
      <h1 class="header-title">Messages</h1>
      <p class="header-subtitle">Stay connected with your teachers and classmates</p>
    </div>
    <div class="header-actions">
      <button class="compose-btn">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M3 3h18v18H3z"></path>
          <polyline points="8 10 12 14 16 10"></polyline>
        </svg>
        <span>Compose</span>
      </button>
      <button class="notification-btn">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
          <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
        </svg>
        <span class="notification-badge">5</span>
      </button>
    </div>
  </div>

  <div class="messages-container">
    <!-- Left Sidebar - Conversations List -->
    <aside class="conversations-sidebar">
      <!-- Search and Filter -->
      <div class="search-section">
        <div class="search-box">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
          </svg>
          <input type="text" placeholder="Search messages..." />
        </div>
        <div class="filter-tabs">
          <button class="tab-btn active" data-category="inbox">
            Inbox
            <span class="tab-badge">5</span>
          </button>
          <button class="tab-btn" data-category="sent">Sent</button>
          <button class="tab-btn" data-category="announcements">
            Announcements
            <span class="tab-badge">3</span>
          </button>
          <button class="tab-btn" data-category="archive">Archive</button>
        </div>
      </div>

      <!-- Conversations List -->
      <div class="conversations-list" id="conversationsList">
        {conversations.map((conv) => (
          <div class={`conversation-item ${!conv.isRead ? 'unread' : ''}`} data-conversation-id={conv.id}>
            <div class="conversation-avatar">
              <div class="avatar">{conv.avatar}</div>
              {conv.unread > 0 && <span class="unread-dot"></span>}
            </div>
            <div class="conversation-content">
              <div class="conversation-header">
                <h4 class="conversation-name">{conv.name}</h4>
                <span class="conversation-time">{conv.timestamp}</span>
              </div>
              <p class="conversation-role">{conv.role}</p>
              <p class="conversation-preview">{conv.lastMessage}</p>
            </div>
            {conv.isPriority && (
              <div class="priority-badge" title="Priority Message">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                </svg>
              </div>
            )}
            {conv.unread > 0 && (
              <span class="unread-count">{conv.unread}</span>
            )}
          </div>
        ))}
      </div>

      <!-- Announcements List (hidden by default) -->
      <div class="announcements-list" id="announcementsList" style="display: none;">
        {announcements.map((ann) => (
          <div class="announcement-item">
            {ann.isPinned && (
              <div class="pinned-badge">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M16 9V4h1c.55 0 1-.45 1-1s-.45-1-1-1H7c-.55 0-1 .45-1 1s.45 1 1 1h1v5c0 1.66-1.34 3-3 3v2h5.97v7l1 1 1-1v-7H19v-2c-1.66 0-3-1.34-3-3z"></path>
                </svg>
              </div>
            )}
            <div class="announcement-header">
              <h4 class="announcement-title">{ann.title}</h4>
              <span class={`announcement-category ${ann.category.toLowerCase()}`}>{ann.category}</span>
            </div>
            <p class="announcement-message">{ann.message}</p>
            <span class="announcement-time">{ann.timestamp}</span>
          </div>
        ))}
      </div>
    </aside>

    <!-- Main Message Area -->
    <main class="message-main">
      <!-- Message Thread Header -->
      <div class="thread-header">
        <div class="thread-user-info">
          <div class="avatar-large">SW</div>
          <div>
            <h3 class="thread-name">Sarah Williams</h3>
            <p class="thread-status">Business English Teacher â€¢ Active now</p>
          </div>
        </div>
        <div class="thread-actions">
          <button class="icon-btn" title="Search in conversation">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
          </button>
          <button class="icon-btn" title="More options">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="1"></circle>
              <circle cx="12" cy="5" r="1"></circle>
              <circle cx="12" cy="19" r="1"></circle>
            </svg>
          </button>
        </div>
      </div>

      <!-- Message Thread -->
      <div class="message-thread">
        {messageThread.map((msg) => (
          <div class={`message-bubble ${msg.isOwn ? 'own' : ''}`}>
            {!msg.isOwn && (
              <div class="message-avatar">{msg.avatar}</div>
            )}
            <div class="message-content">
              {!msg.isOwn && <p class="message-sender">{msg.sender}</p>}
              <div class="message-text">{msg.message}</div>
              <span class="message-timestamp">{msg.timestamp}</span>
            </div>
            {msg.isOwn && (
              <div class="message-avatar">{msg.avatar}</div>
            )}
          </div>
        ))}
      </div>

      <!-- Message Compose Area -->
      <div class="message-compose">
        <button class="attachment-btn" title="Attach file">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>
          </svg>
        </button>
        <input
          type="text"
          class="compose-input"
          placeholder="Type your message here..."
        />
        <button class="emoji-btn" title="Add emoji">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
            <line x1="9" y1="9" x2="9.01" y2="9"></line>
            <line x1="15" y1="9" x2="15.01" y2="9"></line>
          </svg>
        </button>
        <button class="send-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="22" y1="2" x2="11" y2="13"></line>
            <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
          </svg>
          <span>Send</span>
        </button>
      </div>
    </main>

    <!-- Right Sidebar - Teacher Contacts -->
    <aside class="contacts-sidebar">
      <div class="contacts-header">
        <h3 class="contacts-title">Teacher Contacts</h3>
      </div>
      <div class="contacts-list">
        {teachers.map((teacher) => (
          <div class="contact-item">
            <div class="contact-avatar-wrapper">
              <div class="avatar">{teacher.avatar}</div>
              <span class={`status-indicator ${teacher.status}`}></span>
            </div>
            <div class="contact-info">
              <h4 class="contact-name">{teacher.name}</h4>
              <p class="contact-subject">{teacher.subject}</p>
            </div>
            <button class="quick-message-btn" title="Send quick message">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
              </svg>
            </button>
          </div>
        ))}
      </div>

      <!-- Quick Actions -->
      <div class="quick-actions-section">
        <h3 class="contacts-title">Quick Actions</h3>
        <button class="quick-action-btn">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <polyline points="14 2 14 8 20 8"></polyline>
          </svg>
          <span>Request Feedback</span>
        </button>
        <button class="quick-action-btn">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          <span>Schedule Meeting</span>
        </button>
        <button class="quick-action-btn">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="16" x2="12" y2="12"></line>
            <line x1="12" y1="8" x2="12.01" y2="8"></line>
          </svg>
          <span>Ask Question</span>
        </button>
      </div>
    </aside>
  </div>
</DashboardLayout>

<style>
  /* Header Styles */
  .header-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .header-subtitle {
    font-size: 1rem;
    color: var(--bc-dark-gray);
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .compose-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 0.9375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .compose-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.3);
  }

  .notification-btn {
    position: relative;
    width: 44px;
    height: 44px;
    border-radius: 12px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: var(--bc-primary-blue);
  }

  .notification-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
  }

  .notification-badge {
    position: absolute;
    top: -4px;
    right: -4px;
    width: 20px;
    height: 20px;
    background: var(--bc-pink);
    color: white;
    border-radius: 50%;
    font-size: 0.75rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Main Messages Container */
  .messages-container {
    display: grid;
    grid-template-columns: 350px 1fr 320px;
    gap: 1.5rem;
    height: calc(100vh - 250px);
    min-height: 600px;
  }

  /* Conversations Sidebar */
  .conversations-sidebar {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(35, 7, 90, 0.1);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .search-section {
    padding: 1.5rem;
    border-bottom: 1px solid var(--bc-light-gray);
  }

  .search-box {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    background: rgba(35, 7, 90, 0.03);
    border: 1px solid var(--bc-light-gray);
    border-radius: 12px;
    margin-bottom: 1rem;
    transition: all 0.2s ease;
  }

  .search-box:focus-within {
    background: white;
    border-color: var(--bc-primary-blue);
    box-shadow: 0 0 0 3px rgba(35, 7, 90, 0.05);
  }

  .search-box svg {
    color: var(--bc-dark-gray);
    flex-shrink: 0;
  }

  .search-box input {
    flex: 1;
    border: none;
    background: transparent;
    font-size: 0.9375rem;
    color: var(--bc-primary-blue);
    outline: none;
  }

  .search-box input::placeholder {
    color: var(--bc-dark-gray);
  }

  .filter-tabs {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .tab-btn {
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid var(--bc-light-gray);
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--bc-dark-gray);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.375rem;
  }

  .tab-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
    color: var(--bc-primary-blue);
  }

  .tab-btn.active {
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    border-color: var(--bc-primary-blue);
    color: white;
  }

  .tab-badge {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .tab-btn.active .tab-badge {
    background: rgba(255, 255, 255, 0.3);
  }

  /* Conversations List */
  .conversations-list {
    flex: 1;
    overflow-y: auto;
  }

  .conversation-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid var(--bc-light-gray);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .conversation-item:hover {
    background: rgba(35, 7, 90, 0.03);
  }

  .conversation-item.unread {
    background: rgba(255, 20, 147, 0.03);
  }

  .conversation-avatar {
    position: relative;
    flex-shrink: 0;
  }

  .avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1rem;
  }

  .unread-dot {
    position: absolute;
    top: 0;
    right: 0;
    width: 12px;
    height: 12px;
    background: var(--bc-pink);
    border: 2px solid white;
    border-radius: 50%;
  }

  .conversation-content {
    flex: 1;
    min-width: 0;
  }

  .conversation-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    margin-bottom: 0.25rem;
  }

  .conversation-name {
    font-size: 1rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .conversation-time {
    font-size: 0.75rem;
    color: var(--bc-dark-gray);
    flex-shrink: 0;
    margin-left: 0.5rem;
  }

  .conversation-role {
    font-size: 0.8125rem;
    color: var(--bc-dark-gray);
    margin-bottom: 0.375rem;
  }

  .conversation-preview {
    font-size: 0.875rem;
    color: var(--bc-dark-gray);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .conversation-item.unread .conversation-preview {
    font-weight: 600;
    color: var(--bc-primary-blue);
  }

  .priority-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    color: #f59e0b;
  }

  .unread-count {
    position: absolute;
    top: 1rem;
    right: 1rem;
    min-width: 24px;
    height: 24px;
    padding: 0 0.5rem;
    background: var(--bc-pink);
    color: white;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Announcements List */
  .announcements-list {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
  }

  .announcement-item {
    background: rgba(35, 7, 90, 0.03);
    border-radius: 12px;
    padding: 1.25rem;
    margin-bottom: 1rem;
    position: relative;
    transition: all 0.2s ease;
  }

  .announcement-item:hover {
    background: rgba(35, 7, 90, 0.05);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.08);
  }

  .pinned-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    color: #f59e0b;
  }

  .announcement-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.75rem;
    gap: 1rem;
  }

  .announcement-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    flex: 1;
  }

  .announcement-category {
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    flex-shrink: 0;
  }

  .announcement-category.important {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .announcement-category.update {
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
  }

  .announcement-category.event {
    background: rgba(168, 85, 247, 0.1);
    color: #a855f7;
  }

  .announcement-message {
    font-size: 0.875rem;
    color: var(--bc-dark-gray);
    line-height: 1.5;
    margin-bottom: 0.75rem;
  }

  .announcement-time {
    font-size: 0.75rem;
    color: #94a3b8;
  }

  /* Main Message Area */
  .message-main {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(35, 7, 90, 0.1);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .thread-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--bc-light-gray);
  }

  .thread-user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .avatar-large {
    width: 56px;
    height: 56px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1.25rem;
  }

  .thread-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .thread-status {
    font-size: 0.875rem;
    color: var(--bc-dark-gray);
  }

  .thread-actions {
    display: flex;
    gap: 0.5rem;
  }

  .icon-btn {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: var(--bc-primary-blue);
  }

  .icon-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
  }

  /* Message Thread */
  .message-thread {
    flex: 1;
    overflow-y: auto;
    padding: 2rem 1.5rem;
    background: linear-gradient(180deg, rgba(35, 7, 90, 0.01) 0%, rgba(90, 58, 119, 0.02) 100%);
  }

  .message-bubble {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
    align-items: flex-start;
  }

  .message-bubble.own {
    flex-direction: row-reverse;
  }

  .message-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 0.875rem;
    flex-shrink: 0;
  }

  .message-content {
    max-width: 65%;
  }

  .message-bubble.own .message-content {
    text-align: right;
  }

  .message-sender {
    font-size: 0.8125rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.375rem;
  }

  .message-text {
    padding: 1rem 1.25rem;
    background: white;
    border-radius: 16px;
    border: 1px solid var(--bc-light-gray);
    font-size: 0.9375rem;
    line-height: 1.5;
    color: var(--bc-primary-blue);
    box-shadow: 0 2px 8px rgba(35, 7, 90, 0.05);
  }

  .message-bubble.own .message-text {
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    color: white;
    border-color: transparent;
  }

  .message-timestamp {
    display: block;
    font-size: 0.75rem;
    color: #94a3b8;
    margin-top: 0.375rem;
  }

  /* Message Compose */
  .message-compose {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1.5rem;
    border-top: 1px solid var(--bc-light-gray);
    background: white;
  }

  .attachment-btn,
  .emoji-btn {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: var(--bc-primary-blue);
    flex-shrink: 0;
  }

  .attachment-btn:hover,
  .emoji-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
  }

  .compose-input {
    flex: 1;
    padding: 0.875rem 1.25rem;
    border: 1px solid var(--bc-light-gray);
    border-radius: 12px;
    font-size: 0.9375rem;
    color: var(--bc-primary-blue);
    outline: none;
    transition: all 0.2s ease;
  }

  .compose-input:focus {
    border-color: var(--bc-primary-blue);
    box-shadow: 0 0 0 3px rgba(35, 7, 90, 0.05);
  }

  .send-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 0.9375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .send-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 7, 90, 0.3);
  }

  /* Contacts Sidebar */
  .contacts-sidebar {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(35, 7, 90, 0.1);
    overflow-y: auto;
  }

  .contacts-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--bc-light-gray);
  }

  .contacts-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
  }

  .contacts-list {
    padding: 1rem;
  }

  .contact-item {
    display: flex;
    align-items: center;
    gap: 0.875rem;
    padding: 1rem;
    border-radius: 12px;
    margin-bottom: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .contact-item:hover {
    background: rgba(35, 7, 90, 0.05);
  }

  .contact-avatar-wrapper {
    position: relative;
    flex-shrink: 0;
  }

  .contact-avatar-wrapper .avatar {
    width: 44px;
    height: 44px;
    font-size: 0.9375rem;
  }

  .status-indicator {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid white;
  }

  .status-indicator.online {
    background: #22c55e;
  }

  .status-indicator.offline {
    background: #94a3b8;
  }

  .status-indicator.away {
    background: #f59e0b;
  }

  .contact-info {
    flex: 1;
    min-width: 0;
  }

  .contact-name {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 0.25rem;
  }

  .contact-subject {
    font-size: 0.8125rem;
    color: var(--bc-dark-gray);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .quick-message-btn {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    border: 1px solid var(--bc-light-gray);
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: var(--bc-primary-blue);
    flex-shrink: 0;
  }

  .quick-message-btn:hover {
    background: linear-gradient(135deg, var(--bc-primary-blue), var(--bc-light-blue));
    color: white;
    border-color: transparent;
  }

  /* Quick Actions Section */
  .quick-actions-section {
    padding: 1.5rem;
    border-top: 1px solid var(--bc-light-gray);
  }

  .quick-action-btn {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0.875rem 1rem;
    background: transparent;
    border: 1px solid var(--bc-light-gray);
    border-radius: 12px;
    color: var(--bc-primary-blue);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-bottom: 0.5rem;
  }

  .quick-action-btn:hover {
    background: rgba(35, 7, 90, 0.05);
    border-color: var(--bc-primary-blue);
    transform: translateX(4px);
  }

  /* Responsive Design */
  @media (max-width: 1440px) {
    .messages-container {
      grid-template-columns: 320px 1fr 280px;
    }
  }

  @media (max-width: 1200px) {
    .messages-container {
      grid-template-columns: 300px 1fr;
    }

    .contacts-sidebar {
      display: none;
    }
  }

  @media (max-width: 768px) {
    .header-actions {
      flex-direction: row;
      gap: 0.75rem;
    }

    .compose-btn span {
      display: none;
    }

    .messages-container {
      grid-template-columns: 1fr;
      height: calc(100vh - 280px);
    }

    .conversations-sidebar {
      display: none;
    }

    .conversations-sidebar.active {
      display: flex;
      position: fixed;
      left: 0;
      top: 0;
      bottom: 0;
      width: 100%;
      z-index: 200;
      border-radius: 0;
    }

    .message-main {
      border-radius: 16px;
    }

    .message-content {
      max-width: 85%;
    }

    .send-btn span {
      display: none;
    }

    .filter-tabs {
      gap: 0.375rem;
    }

    .tab-btn {
      font-size: 0.8125rem;
      padding: 0.5rem 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .message-compose {
      padding: 1rem;
    }

    .compose-input {
      font-size: 0.875rem;
      padding: 0.75rem 1rem;
    }

    .avatar-large {
      width: 48px;
      height: 48px;
      font-size: 1.125rem;
    }

    .thread-name {
      font-size: 1rem;
    }

    .thread-status {
      font-size: 0.8125rem;
    }
  }
</style>

<script>
  // Tab switching functionality
  const tabButtons = document.querySelectorAll('.tab-btn');
  const conversationsList = document.getElementById('conversationsList');
  const announcementsList = document.getElementById('announcementsList');

  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Remove active class from all tabs
      tabButtons.forEach(btn => btn.classList.remove('active'));
      // Add active class to clicked tab
      button.classList.add('active');

      const category = button.dataset.category;

      // Show/hide appropriate content
      if (category === 'announcements') {
        if (conversationsList) conversationsList.style.display = 'none';
        if (announcementsList) announcementsList.style.display = 'block';
      } else {
        if (conversationsList) conversationsList.style.display = 'block';
        if (announcementsList) announcementsList.style.display = 'none';
      }
    });
  });

  // Conversation item click handler
  const conversationItems = document.querySelectorAll('.conversation-item');
  conversationItems.forEach(item => {
    item.addEventListener('click', () => {
      // Remove active class from all conversations
      conversationItems.forEach(conv => conv.classList.remove('active'));
      // Add active class to clicked conversation
      item.classList.add('active');

      // Mark as read
      item.classList.remove('unread');
      const unreadCount = item.querySelector('.unread-count');
      if (unreadCount) {
        unreadCount.remove();
      }
    });
  });

  // Compose input auto-expand
  const composeInput = document.querySelector('.compose-input');
  if (composeInput) {
    composeInput.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = this.scrollHeight + 'px';
    });
  }

  // Send button handler
  const sendBtn = document.querySelector('.send-btn');
  if (sendBtn && composeInput) {
    sendBtn.addEventListener('click', () => {
      const message = (composeInput as HTMLInputElement).value.trim();
      if (message) {
        // Here you would typically send the message to a backend
        console.log('Sending message:', message);
        (composeInput as HTMLInputElement).value = '';
      }
    });

    // Send on Enter key
    composeInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendBtn.click();
      }
    });
  }
</script>
