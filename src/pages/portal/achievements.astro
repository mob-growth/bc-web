---
import DashboardLayout from '../../components/portal/DashboardLayout.astro';
import SidebarNav from '../../components/portal/SidebarNav.astro';

// Achievement overview stats
const achievementStats = {
  totalBadges: 24,
  totalPoints: 3850,
  currentLevel: 'B2',
  levelProgress: 68,
  ranking: 12,
  streakDays: 15
};

// Featured achievements - floating bubbles
const featuredAchievements = [
  {
    name: 'Grammar Master',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/><path d="M4 22h16"/><path d="M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22"/><path d="M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/></svg>',
    points: 150,
    color: '#667eea',
    unlocked: true,
    size: 'large'
  },
  {
    name: 'Perfect Attendance',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>',
    points: 200,
    color: '#ec4899',
    unlocked: true,
    size: 'large'
  },
  {
    name: 'Speaking Star',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" x2="12" y1="19" y2="22"/></svg>',
    points: 200,
    color: '#f97316',
    unlocked: true,
    size: 'medium'
  },
  {
    name: 'Bookworm',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"/></svg>',
    points: 100,
    color: '#10b981',
    unlocked: true,
    size: 'medium'
  },
  {
    name: '15 Day Streak',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"/></svg>',
    points: 150,
    color: '#ec4899',
    unlocked: true,
    size: 'small'
  },
  {
    name: 'Team Player',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>',
    points: 150,
    color: '#8b5cf6',
    unlocked: true,
    size: 'small'
  }
];

// Achievement path/timeline
const achievementPath = [
  { name: 'Reading Champion', progress: 75, color: '#b794d4', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"/><path d="M8 7h8"/><path d="M8 11h8"/></svg>' },
  { name: 'Vocabulary Wizard', progress: 60, color: '#dcc6f0', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/><path d="M14 3v5h5"/><path d="M10 13H8"/><path d="M10 17H8"/><path d="M16 13h-2"/><path d="M16 17h-2"/></svg>' },
  { name: 'Presentation Pro', progress: 80, color: '#ff9ec7', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" x2="12" y1="19" y2="22"/></svg>' },
  { name: '30 Day Streak', progress: 50, color: '#ffd4e8', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"/></svg>' },
  { name: 'Peer Helper', progress: 45, color: '#e8d9f5', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>' },
  { name: 'Creative Mind', progress: 40, color: '#ffcce0', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2v4"/><path d="m4.93 4.93 2.83 2.83"/><path d="M2 12h4"/><path d="m4.93 19.07 2.83-2.83"/><path d="M12 18v4"/><path d="m19.07 19.07-2.83-2.83"/><path d="M22 12h-4"/><path d="m19.07 4.93-2.83 2.83"/><circle cx="12" cy="12" r="3"/></svg>' }
];

// Recent unlocked achievements
const recentUnlocked = [
  { name: 'Grammar Master', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="#b794d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/><path d="M4 22h16"/><path d="M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22"/><path d="M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/></svg>', date: 'Yesterday', color: '#b794d4' },
  { name: 'Perfect Attendance', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="#ff9ec7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>', date: '2 days ago', color: '#ff9ec7' },
  { name: 'Bookworm', icon: '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="#e8d9f5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"/></svg>', date: '3 days ago', color: '#e8d9f5' }
];
---

<DashboardLayout title="Achievements & Badges" currentPage="achievements">
  <SidebarNav slot="sidebar" currentPage="achievements" />

  <div slot="header" class="header-content">
    <div>
      <h1 class="header-title">Achievements</h1>
      <p class="header-subtitle">Your learning journey milestones</p>
    </div>
    <div class="header-stats">
      <div class="stat-badge">
        <span class="stat-icon" set:html={'<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#ff9ec7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/><path d="M4 22h16"/><path d="M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22"/><path d="M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/></svg>'}></span>
        <span class="stat-value">{achievementStats.totalBadges}</span>
      </div>
      <div class="stat-badge">
        <span class="stat-icon" set:html={'<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#ffd4e8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>'}></span>
        <span class="stat-value">{achievementStats.totalPoints}</span>
      </div>
    </div>
  </div>

  <div class="achievements-container">

    <!-- Compact Stats Row -->
    <div class="compact-stats">
      <div class="compact-stat glass">
        <div class="compact-stat-content">
          <span class="compact-label">Points</span>
          <h3 class="compact-value">{achievementStats.totalPoints}</h3>
        </div>
      </div>
      <div class="compact-stat glass">
        <div class="compact-stat-content">
          <span class="compact-label">Rank</span>
          <h3 class="compact-value">#{achievementStats.ranking}</h3>
        </div>
      </div>
      <div class="compact-stat glass">
        <div class="compact-stat-content">
          <span class="compact-label">Streak</span>
          <h3 class="compact-value">{achievementStats.streakDays} days</h3>
        </div>
      </div>
    </div>

    <!-- Level Progress Circle -->
    <div class="level-section glass">
      <div class="level-header">
        <h2 class="section-title">Level Progress</h2>
      </div>
      <div class="level-circle-container">
        <div class="circular-progress-large">
          <svg class="progress-ring-large" width="200" height="200">
            <circle
              class="progress-ring-bg"
              stroke="rgba(255, 255, 255, 0.2)"
              stroke-width="12"
              fill="none"
              r="85"
              cx="100"
              cy="100"
            />
            <circle
              class="progress-ring-fill"
              stroke="url(#level-gradient)"
              stroke-width="12"
              fill="none"
              r="85"
              cx="100"
              cy="100"
              style={`stroke-dasharray: ${534 * achievementStats.levelProgress / 100} 534; stroke-dashoffset: 133.5;`}
            />
            <defs>
              <linearGradient id="level-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#ec4899;stop-opacity:1" />
              </linearGradient>
            </defs>
          </svg>
          <div class="progress-center">
            <span class="level-text">{achievementStats.currentLevel}</span>
            <span class="level-percent">{achievementStats.levelProgress}%</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Floating Achievement Bubbles -->
    <div class="bubbles-section glass">
      <h2 class="section-title">Featured Achievements</h2>
      <div class="bubbles-container">
        {featuredAchievements.map((achievement, index) => (
          <div
            class={`achievement-bubble ${achievement.size} ${achievement.unlocked ? 'unlocked' : 'locked'}`}
            style={`--bubble-color: ${achievement.color}; animation-delay: ${index * 0.1}s;`}
          >
            <div class="bubble-glow"></div>
            <div class="bubble-content">
              <span class="bubble-icon" set:html={achievement.icon}></span>
              <span class="bubble-name">{achievement.name}</span>
              <span class="bubble-points">+{achievement.points}</span>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Recent Unlocked -->
    <div class="recent-section glass">
      <h2 class="section-title">Recently Unlocked</h2>
      <div class="recent-grid">
        {recentUnlocked.map((achievement) => (
          <div class="recent-card" style={`--card-color: ${achievement.color}`}>
            <span class="recent-icon" set:html={achievement.icon}></span>
            <div class="recent-info">
              <h4>{achievement.name}</h4>
              <p>{achievement.date}</p>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Achievement Path / Timeline -->
    <div class="path-section glass">
      <h2 class="section-title">Achievement Path</h2>
      <div class="achievement-path">
        {achievementPath.map((achievement, index) => (
          <div class="path-item">
            <div class="path-connector" style={index === 0 ? 'opacity: 0;' : ''}></div>
            <div class="path-node">
              <div class="path-icon-wrapper" style={`background: ${achievement.color};`}>
                <span class="path-icon" set:html={achievement.icon}></span>
              </div>
              <div class="path-progress-ring">
                <svg width="100" height="100">
                  <circle
                    class="path-ring-bg"
                    stroke="rgba(255, 255, 255, 0.2)"
                    stroke-width="4"
                    fill="none"
                    r="45"
                    cx="50"
                    cy="50"
                  />
                  <circle
                    class="path-ring-fill"
                    stroke={achievement.color}
                    stroke-width="4"
                    fill="none"
                    r="45"
                    cx="50"
                    cy="50"
                    style={`stroke-dasharray: ${283 * achievement.progress / 100} 283; stroke-dashoffset: 70.75;`}
                  />
                </svg>
              </div>
            </div>
            <div class="path-info">
              <h4>{achievement.name}</h4>
              <p>{achievement.progress}%</p>
            </div>
          </div>
        ))}
      </div>
    </div>

  </div>
</DashboardLayout>

<style>
  /* Container */
  .achievements-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  /* Glass Effect */
  .glass {
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow:
      0 8px 32px rgba(31, 38, 135, 0.15),
      0 4px 12px rgba(0, 0, 0, 0.08);
    border-radius: 24px;
  }

  /* Header */
  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .header-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .header-subtitle {
    font-size: 1rem;
    color: var(--bc-dark-gray);
  }

  .header-stats {
    display: flex;
    gap: 1rem;
  }

  .stat-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }

  .stat-icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .stat-icon svg {
    display: block;
  }

  .stat-value {
    font-weight: 600;
    color: var(--bc-primary-blue);
  }

  /* Compact Stats */
  .compact-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }

  .compact-stat {
    padding: 1.5rem;
    transition: all 0.3s ease;
  }

  .compact-stat:hover {
    transform: translateY(-4px);
    box-shadow:
      0 12px 40px rgba(31, 38, 135, 0.2),
      0 6px 16px rgba(0, 0, 0, 0.1);
  }

  .compact-stat-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .compact-label {
    font-size: 0.875rem;
    color: var(--bc-medium-gray);
    font-weight: 500;
  }

  .compact-value {
    font-size: 1.75rem;
    font-weight: 700;
    background: linear-gradient(135deg, #667eea, #ec4899);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  /* Section Title */
  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 1.5rem;
  }

  /* Level Section */
  .level-section {
    padding: 2rem;
  }

  .level-circle-container {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
  }

  .circular-progress-large {
    position: relative;
  }

  .progress-ring-large {
    transform: rotate(-90deg);
  }

  .progress-ring-fill {
    transition: stroke-dasharray 0.5s ease;
    stroke-linecap: round;
  }

  .progress-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }

  .level-text {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .level-percent {
    display: block;
    font-size: 1rem;
    color: var(--bc-medium-gray);
  }

  /* Floating Achievement Bubbles */
  .bubbles-section {
    padding: 2rem;
  }

  .bubbles-container {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    justify-content: center;
    align-items: center;
    padding: 2rem 0;
    min-height: 300px;
  }

  .achievement-bubble {
    position: relative;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bubble-color);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.15),
      0 0 40px var(--bubble-color, rgba(102, 126, 234, 0.3));
    transition: all 0.4s ease;
    animation: float 3s ease-in-out infinite;
  }

  .achievement-bubble.large {
    width: 160px;
    height: 160px;
  }

  .achievement-bubble.medium {
    width: 130px;
    height: 130px;
  }

  .achievement-bubble.small {
    width: 100px;
    height: 100px;
  }

  .achievement-bubble:hover {
    transform: translateY(-8px) scale(1.05);
    box-shadow: 
      0 12px 48px rgba(0, 0, 0, 0.2),
      0 0 60px var(--bubble-color, rgba(102, 126, 234, 0.5));
  }

  .bubble-glow {
    position: absolute;
    inset: -20px;
    border-radius: 50%;
    background: radial-gradient(circle, var(--bubble-color, rgba(102, 126, 234, 0.4)), transparent 70%);
    opacity: 0.5;
    animation: pulse 2s ease-in-out infinite;
    z-index: -1;
  }

  .bubble-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    color: white;
    text-align: center;
    padding: 1rem;
  }

  .bubble-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
  }

  .bubble-icon svg {
    display: block;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
  }

  .achievement-bubble.large .bubble-icon svg {
    width: 50px;
    height: 50px;
  }

  .achievement-bubble.medium .bubble-icon svg {
    width: 40px;
    height: 40px;
  }

  .achievement-bubble.small .bubble-icon svg {
    width: 32px;
    height: 32px;
  }

  .bubble-name {
    font-size: 0.875rem;
    font-weight: 600;
    line-height: 1.2;
  }

  .bubble-points {
    font-size: 0.75rem;
    opacity: 0.9;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); opacity: 0.5; }
    50% { transform: scale(1.1); opacity: 0.7; }
  }

  /* Recent Section */
  .recent-section {
    padding: 2rem;
  }

  .recent-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }

  .recent-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    border-left: 4px solid var(--card-color);
    transition: all 0.3s ease;
  }

  .recent-card:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateX(4px);
  }

  .recent-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .recent-icon svg {
    display: block;
  }

  .recent-info h4 {
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .recent-info p {
    font-size: 0.875rem;
    color: var(--bc-medium-gray);
  }

  /* Achievement Path */
  .path-section {
    padding: 2rem;
  }

  .achievement-path {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2.5rem;
    margin-top: 2rem;
  }

  .path-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }

  .path-connector {
    position: absolute;
    top: 50px;
    left: -50%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.3), transparent);
  }

  .path-node {
    position: relative;
    margin-bottom: 1rem;
  }

  .path-icon-wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
  }

  .path-icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .path-icon svg {
    display: block;
  }

  .path-progress-ring {
    transform: rotate(-90deg);
  }

  .path-ring-fill {
    transition: stroke-dasharray 0.5s ease;
    stroke-linecap: round;
  }

  .path-info {
    text-align: center;
  }

  .path-info h4 {
    font-weight: 600;
    color: var(--bc-primary-blue);
    margin-bottom: 0.25rem;
  }

  .path-info p {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--bc-medium-gray);
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .achievement-path {
      grid-template-columns: repeat(2, 1fr);
    }

    .bubbles-container {
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .compact-stats {
      grid-template-columns: 1fr;
    }

    .recent-grid {
      grid-template-columns: 1fr;
    }

    .achievement-path {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .path-connector {
      display: none;
    }

    .bubbles-container {
      flex-direction: column;
    }
  }
</style>
